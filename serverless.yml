# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bamboo-server
useDotenv: true
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: ap-northeast-2
  stage: api

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  # hello:
  #   handler: handler.hello
  #   events:
  #     - http:
  #         path: /
  #         method: get
  #   cors:
  #     origin: "*"
  post:
    handler: src/sls.handler
    events:
      - http:
          path: post
          method: get
      - http:
          path: post
          method: post
      - http:
          path: post/{id}
          method: patch
      - http:
          path: post/{arg}
          method: delete
      # - http:
      #     path: /
      #     method: get
    cors:
      origin: "*"

  auth:
    handler: handler.authAdmin
    events:
      - http:
          path: auth
          method: post
    cors:
      origin: "*"
  verify:
    handler: handler.getVerifyQuestion
    events:
      - http:
          path: verify
          method: get
    cors:
      origin: "*"
plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-offline
custom:
  dotenv:
    required:
      env:
        - PORT
        - MONGO_URL
        - DISCORD_WEBHOOK
        - DISCORD_TEST_WEBHOOK
        - DISCORD_MANAGEMENT_WEBHOOK
        - ADMIN_PASSWORD
        - JWT_SECRET
